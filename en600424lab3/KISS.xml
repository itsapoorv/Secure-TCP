<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is modified by Seth Nielson for creating P-RFC's
 (Playground-RFC's). -->
<!-- This template is for creating an Internet Draft using xml2rfc,
 which is available here: http://xml2rfc.ietf.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
There has to be one entity for each item to be referenced.
An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3602 SYSTEM "http://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3602.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
 please see http://xml2rfc.ietf.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
 (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
 (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->




<rfc category="std" docName="rfc1" ipr="playgroundSpring201604" number="1">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: trust200902, noModificationTrust200902, noDerivativesTrust200902,
     or pre5378Trust200902, playgroundWinter201501
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->
    
    <!-- ***** FRONT MATTER ***** -->
    
    <front>
        <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->
        
        <title abbrev="KISS PRFC">Playground Request For Comments: KISS Protocol</title>
        
        <!-- add 'role="editor"' below for the editors if appropriate -->
        
        <!-- Another author who claims to be an editor -->
        
        <author fullname="Rachel Coston" initials="R." role="editor"
            surname="Coston">
            <organization>JHU Network Security Fall 2016</organization>
            
            <address>
                <postal>
                    <street>JHU Malone Hall/3400 North Charles St.</street>
                    
                    <!-- Reorder these if your country does things differently -->
                    
                    <city>Baltimore</city>
                    
                    <region>MD</region>
                    
                    <code>21218</code>
                    
                    <country>USA</country>
                </postal>
                
                <email>rcoston1@jhu.edu</email>
                
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <author fullname="Venkatesh Gopal" initials="V." role="editor"
            surname="Gopa">
            <organization>JHU Network Security Fall 2016</organization>
            
            <address>
                <postal>
                    <street>JHU Malone Hall/3400 North Charles St.</street>
                    
                    <!-- Reorder these if your country does things differently -->
                    
                    <city>Baltimore</city>
                    
                    <region>MD</region>
                    
                    <code>21218</code>
                    
                    <country>USA</country>
                </postal>
                
                <email>vgopal3@jhu.edu</email>
                
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <author fullname="Apoorv Krishak" initials="A." role="editor"
            surname="Krishak">
            <organization>JHU Network Security Fall 2016</organization>
            
            <address>
                <postal>
                    <street>JHU Malone Hall/3400 North Charles St.</street>
                    
                    <!-- Reorder these if your country does things differently -->
                    
                    <city>Baltimore</city>
                    
                    <region>MD</region>
                    
                    <code>21218</code>
                    
                    <country>USA</country>
                </postal>
                
                <email>akrisha1@jhu.edu</email>
                
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        <author fullname="Vishnu Nair" initials="V." role="editor"
            surname="Nair">
            <organization>JHU Network Security Fall 2016</organization>
            
            <address>
                <postal>
                    <street>JHU Malone Hall/3400 North Charles St.</street>
                    
                    <!-- Reorder these if your country does things differently -->
                    
                    <city>Baltimore</city>
                    
                    <region>MD</region>
                    
                    <code>21218</code>
                    
                    <country>USA</country>
                </postal>
                
                <email>vnair8@jhu.edu</email>
                
                <!-- uri and facsimile elements may also be added -->
            </address>
        </author>
        
        <date year="2016" />
        
        <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->
        
        <!-- Meta-data Declarations -->
        
        <area>General</area>
        
        <workgroup>Playground Experiment Director</workgroup>
        
        <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->
        
        <keyword>PRFC</keyword>
        
        <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->
        
        <abstract>
            <t>This PRFC serves to explain the functionality of the KISS protocol which would address the policy of confidentiality of data in the playground platform using symmetric encryption.
                KISS would address only the requirements of confidentiality with regards to the principle of security as other requirements such as authentication and integrity have been addresses by the RIP layer.</t>
        </abstract>
    </front>
    
    <middle>
        <section title="Introduction">
            <t>The KISS protocol provides confidentiality in the transfer of data received from the application layer between two entities.  KISS SHALL guarantee this through the use of 256-bit AES encryption CTR mode.</t>
            
            <t>KISS is designed to work in the stack representation of the different layers involved in the communication of data in the Playground framework, shown in Figure 1.</t>
            
            
            <figure>
                <artwork>
                    +---------------------+
                    |   6. Application    |
                    +---------------------+
                    |       5. KISS       |
                    +---------------------+
                    |  4. Transport (RIP) |
                    +---------------------+
                    |      3. Network     |
                    +---------------------+
                    |    2. Data Link     |
                    +---------------------+
                    |    1. Physical      |
                    +---------------------+
                    
          Figure 1: The stack representation of the
                   playground framework
                </artwork>
                
            </figure>
            <t>KISS SHALL NOT involve certificates nor digital signatures as these are already provided by the underlying RIP layer.  Furthermore, KISS SHOULD NOT try to authenticate a user, as this functionality is also provided by the underlying RIP layer.  </t>
            <t>The KISS layer does not have to worry about the loss or re-transmission of the any packets involved in the handshake or data transfer as these would be addressed by the underlying layer RIP.</t>
            <section title="Requirements Language">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                    "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                    document are to be interpreted as described in <xref
                        target="RFC2119">RFC 2119</xref>.</t>
            </section>
            </section>
            <section title="Operation">
                
                <t>KISS MUST maintain two states: "Handshake" and "DataExchange".  Once the KISS handshake is completed, the protocol SHOULD move to "DataExchange".  The transition between states is shown in Figure 2.</t>
                <figure>
                    <artwork>
                        
               Send HandMsg,
+------------+ Receive HandMsg  +--------------+
| Handshake  |----------------->| DataExchange |
+------------+                  +--------------+

Figure 2: The state diagram for KISS


                    </artwork>
                    
                </figure>
                
                <section title="Handshake">
                    <t>The KISS Handshake state SHOULD be maintained during the establishment of a symmetric key across each channel.</t>
                    <t>KISS MUST establish a connection between two entities through a handshake.  The handshake consists of exchanging a randomly generated, 32 byte key and a randomly generated, 16 byte IV. This Key MUST be used as part of the symmetric encryption mechanism for AES. Two keys and two IVs MUST be created during the handshake phase. </t>
                    <t>The client SHOULD begin the handshake by sending its Key and an IV (Kc and IVc) to the server.  The client MUST then transfer to the "Handshake" state.  The server MUST then reply by sending its key and an IV (Ks and IVs) to the client.  The server MUST then transfer to the "Handshake" state. Finally, when it sends it's reply message it SHOULD transfer to the "DataExchange" state.  When the client receives the handshake message from the server it SHOULD also transfer to the "Data Exchange" state. These steps are shown in Figure 3.</t>
                    <figure><artwork>
        (STEP 1)  Client --> [{Kc}, {IVc}] --> Server
        (STEP 2)  Client &lt;-- [{Ks}, {IVs}] &lt;-- Server
                    
             Figure 3: The steps of the handshake
                    </artwork></figure>
                    <t>The keys and IVs from the handshake SHOULD be saved for use in the handshake in the following manner:
                        <list><t>Kc SHOULD serve as the write key for the client to encrypt the data in the channel from Client to the Server.</t>
                            <t>IVc SHOULD serve as the write counter for the client to encrypt the data in the channel from Client to the Server.</t>
                            <t>Kc SHOULD serve as the read key for the server to decrypt the data in the channel    from Client to the Server.</t>
                            <t>IVc SHOULD serve as the read counter for the server to decrypt the data in the channel from Client to the Server.</t>
                            <t> Ks SHOULD serve as the write key for the server to encrypt the data in the channel from Server to Client.</t>
                            <t> IVs SHOULD serve as the write counter for the server to encrypt the data in the channel from Server to Client.</t>
                            <t>Ks SHOULD serve as the read key for the client to decrypt the data in the channel from Server to Client.</t>
                            <t>IVs SHOULD serve as the read counter for the client to decrypt the data in the channel from Server to Client.</t>
                    </list></t>
                    <section title="Security">
                        <t>The keys involved in the initial handshake are susceptible to attacks if sent in clear text. Thus, KISS handshake MUST involve transfer of encrypted forms of the Key and initialization vectors.</t>
                        <t>In Step 1, the client SHOULD encrypt (Kc) and (IVc) using the public key of the Server. The public key of the Server MUST be availed from the Certificate involved during the handshake of the RIP layer. </t>
                        <t>In step 2, the server SHOULD encrypt (Ks) and (IVs) using the public key of the Client. The public key of the Client MUST be availed from the Certificate involved during the handshake of the RIP layer. </t>
                    </section>
                </section>
                <section title="Data Exchange">
                    <t>The KISS DataExchange MUST be maintained after the KISS Handshake. In this state, data availed from the application MUST be encrypted and passed on to the RIP layer.  Similarly, the data availed from the RIP layer SHOULD be decrypted and passed onto the application.</t>
                
                </section>
                
            </section>
            
        <section title="Specifications">
            <section title="Messages">
                <t>KISS MUST use a different message header for the KISS handshake and the KISS DataExchange. Below is the Class definition to be used in playground to address this functionality.</t>
                <section title="Kiss Handshake Message">
                    <t>The class to be used for KISS handshake MUST involve a Playground identifier, a message version and the body.</t>
                    <figure><artwork>
            class KissHandshake():
                PLAYGROUND_IDENTIFIER = "KissHandshake"
                MESSAGE_VERSION = "1.0"
                BODY = [ (key,STRING),
                         (IV, STRING)]
                    </artwork></figure>
                    <t>The key field MUST hold the randomly generated, 32 byte key created in the handshake.  The IV field MUST contain the randomly generated, 16 byte IV created in the handshake.</t>
                </section>
                <section title="Kiss Data Exchange Message">
                    <t>The class to be used for the KISS Data Exchange MUST involve similarly involve a Playground identifier, a message version and the body.</t>
                    <figure><artwork>
            class KissData():
                PLAYGROUND_IDENTIFIER = "KissData"
                MESSAGE_VERSION = "1.0"
                BODY = [ (data, STRING)]
                    </artwork></figure>
                    <t>The data field MUST contain the data from the application layer, encrypted with AES 256. </t>
                </section>
            </section>
             </section>
            <section title="Encryption Mechanism">
                <t>Advanced Encryption Standard with a 256 bit (32 byte) key and a 128 bit (16 byte) block size SHOULD be used for the purpose of encryption. AES-CTR is easy to implement, and AES-CTR can be pipelined and parallelized. An initialization vector is used to randomize the pattern of encryption. In AES-CTR mode, a combination of key and IV-Block Counter should be fed to the encrypting block.  For more information refer to the <xref
                    target="RFC3602">RFC 3602</xref></t>
                <t>The random initialization vector (128 bit - 16 byte) SHOULD become the block counter. The inputs provided to the AES block cipher encryption SHOULD be this 16 byte counter and the Key which is 32 bytes in length. The output of the cipher block MUST be XOR'ed with the plain text to produce the Cipher text.</t>
                
                <t>The plaintext SHALL NOT be padded to the size of the block, as it is not required in case of Counter mode in AES. The value of the block counter SHOULD be incremented sequentially.</t>
                <section title="Encryption">
                <t>To encrypt the plaintext, AES-CTR MUST partition the data based on the block size of 128 bits. The last block of the plaintext SHOULD be added to match the block size of 128 bits. As shown in Figure 4, if PT represents the complete plaintext, AES should parition it as shown below where each PT[i] represents a block of 128 bits. </t>
                <figure><artwork>
        PT = PT[1] PT[2] ... PT[n]
        
        CTRBLK := IV
            FOR i := 1 to n-1 DO
                CT[i] := PT[i] XOR AES(CTRBLK)
                CTRBLK := CTRBLK + 1
            END
            CT[n] := PT[n] XOR TRUNC(AES(CTRBLK))
                
        Figure 4: PSEUDOCODE For encryption
                </artwork></figure>
                </section>
                <section title="Decryption">
                    <t>At the receiving end, AES SHOULD decrypt the cipher text received based on the pseudo code in Figure 5.</t>
                    <figure><artwork>
                        
        CTRBLK :=  IV 
            FOR i := 1 to n-1 DO
                PT[i] := CT[i] XOR AES(CTRBLK)
                CTRBLK := CTRBLK + 1
            END
            PT[n] := CT[n] XOR TRUNC(AES(CTRBLK))
            
        Figure 5: PSEUDOCODE For decryption
                    </artwork></figure>
                </section>
                <section title="Block Size">
                    <t>The block size to be used for AES-CTR mode for playground purposes SHOULD be 128 bits.</t>
                </section>
            </section>
        
    </middle>
    
    <!--  *****BACK MATTER ***** -->
    
    <back>
        <!-- References split into informative and normative -->
        
        <!-- There are 2 ways to insert reference entries from the citation libraries:
         1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
         2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
         (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")
         
         Both are cited textually in the same manner: by using xref elements.
         If you use the PI option, xml2rfc will, by default, try to find included files in the same
         directory as the including file. You can also define the XML_LIBRARY environment variable
         with a value containing a set of directories to search.  These can be either in the local
         filing system or remote ones accessed by http (http://domain/dir/... ).-->
        
        <references title="Normative References">
            <!--?rfc include="http://xml2rfc.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
            &RFC2119;
            &RFC3602;
            
            
            
            
            
        </references>
        
        
        <!-- Change Log
         
         v00 2006-03-15  EBD   Initial version
         
         v01 2006-04-03  EBD   Moved PI location back to position 1 -
         v3.1 of XMLmind is better with them at this location.
         v02 2007-03-07  AH    removed extraneous nested_list attribute,
         other minor corrections
         v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
         Modified comments around figure to reflect non-implementation of
         figure indent control.  Put in reference using anchor="DOMINATION".
         Fixed up the date specification comments to reflect current truth.
         v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
         added discussion of rfc include.
         v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative
         images. Removed meta-characters from comments (causes problems).
         
         v06 2010-04-01 TT     Changed ipr attribute values to latest ones. Changed date to
         year only, to be consistent with the comments. Updated the
         IANA guidelines reference from the I-D to the finished RFC.
         
         SETH NIELSON:
         Altered for PLAYGROUND AND PRFC's
         2016-09-21 SJN PRFC 1
         -->
    </back>
</rfc>


